一、数据交互与通讯：js(Ajax/JSON) -> flash(swf) -> fms(ams) -> web(python)，对于交互流程有什么看法？安全性要求不高的部分，比如声音和麦克风大小，我们可以直接js操作flash瞬间响应，无需经过服务端FMS或Web的验证。

1、响应房间和用户在线状态：onStatus（params:0离线 1在线等）
2、响应是否开启和关闭摄像头：onCamera（params:0关闭 1开启）
3、响应视频质量：onQuality（直接传送视频参数值，如： 1280宽  720高  512码速  90质量等）
4、响应声音大小调整：onSound（params:0-100音量大小）
5、响应麦克风大小调整：onMic（params:0-100音量大小）
6、响应各种提示音：onTips（params:0-无限，类别表示例：1送礼物提示音，2用户进入提示音等）


二、安全验证：
1、我们可以获取数据库中的《域名访问限制》列表（里面存放的是合法的域名/IP白名单列表），由FMS服务端来直接限制SWF客户端的执行。

2、获取并验证当前用户的Cookie/Session，数据库中存储了登录用户的Session，匿名用户直接在Cookie中（可通过房间在线用户的UID来访问对应用户的Cookie/Session）。

3、SWF客户端是否需要使用用户名和密码方式与FMS建立认证连接核对其身份？

4、目前项目使用的是NoSQL数据库MongoDB，通过访问数据库的路由30000端口来连接的，请确认AMS服务端是否可以直接访问mongodb数据库？主要是驱动问题。如果不行，那需要我们用Python增加一个中间Web模块功能，供AMS访问数据库，使用私人单向或双向SSL（HTTPS连接），我们把AMS作为一个特殊用户，使用Web本身的安全机制来验证其AMS身份。
Item  21:00:22
针对提出的几点，之前我们已经确认了三点，Python程序员那边对应配合一下即可，如下：

注：其实与AS3协调部分主要是控制视频的显示而已，如果用户验证没有通过或无权限就断开连接就是了。

一、数据通信：使用xml或者json格式，json格式可能更容易协调，像动态操作层都是通过JS，然后json传输数据。数据交互AS3提供接口，供js端调用。基本的思想是：用户前端操作发出js，js发送ajax给web，web验证session，合法就返回参数给回调函数，不合法也返回，不过是错误提示。其实js->python这块，主要的目的是验证合法性。

目前这部分之前已经有部分完成，所以返回参数这块，目前是传的什么参数就返回什么，比如/flashplay？onCamary=1 这个请求返回的参数就是jason ： "{onCamary:1}"，后面如果js->flash需要其他的参数再添加完善。同时前面列出的6点数据交互还很初步，需不断完善。

二、FMS访问MySQL和MSSQL都有驱动，MongoDB目前没有。我们可以为AS3提供一个API接口供其访问数据库，同时控制访问数据库的权限。安全方面我们把fms看成一个特殊的用户，通过web的常规安全认证来实现保护（Cookie/Session），数据通讯使用HTTP或HTTPS保证数据传输的安全性（运维已经部署好了私人单向和双向SSL）。

至于FMS服务器端验证Flash SWF客户端文件的安全，可以用多种方式结合，比如是否通过我们《域名访问限制》中的域名/IP访问，以及通过用户信息比对，比如验证用户的Cookie/Session等方式。

三、因为每个房间的所属FMS服务器可能不同，所以AS3需要知道当前房间的所属FMS服务器的IP/域名地址是多少，才能对应去建立连接，两种方法：
1、通过flashvars变量传递，但通过查看页面源代码，能知道咱们的fms地址。

2、调用一个js，可能更安全些，调用js返回fms的ip地址即可，然后再去连接。fms地址就隐藏了，只能通过我们域名下才能调用成功，所以我们选择这种方式来处理。还可以你提供接口，我们这边来设置等方式。


新AS3目前先提出三点需求：

一、首先获取当前房间（房主）所属的FMS服务器，然后经过认证后建立连接。每个房间（房主）以及在线登录用户都有一个全站唯一的UID号（未登陆的匿名用户除外），这个UID号也是房间（房主）的URL地址，如：http://xxx.domain.com/ XXX既当前房间（房主）的UID号。注：FMS服务器采用分布式部署（边缘服务器）。

二、我们需要获取用户所有摄像头设备列表和所有麦克风设备列表，并传送给web，以便web端选择和开启一个或同时多个摄像头/麦克风设备（因需求中涉及多视频功能）。对于Cookie/Session中已标识开启的设备，将直接默认开启（如果对应存在的话，如需授权，授权同意后开启）。

三、基于RTMFP实时媒体流控制协议（UDP）、P2P点对点数据互传技术，实现数据分流，可在无需服务器的条件下进行点对点直接传送流媒体数据，无法分流或分流不足时从当前房间的所属FMS服务器中传输数据。视频采用H.264/AVC编码，视频画面显示比例为16:9（包括SWF文件窗口的比例也需固定为16:9比例），如视频源为4:3等比例，按16:9比例同比放大显示即可。可开启当前房间中所有在线用户视频（前提是当前用户已开启摄像头），从《在线用户列表》中选择后在主视频中显示，之前的视频显示到《多视频》中以小视频显示。

1、视频窗口中上方一排为《多视频》小窗口，小视频窗口大小：192px * 108px（16：9），《多视频》居中显示，当前一行无法排列时在视频下方显示一行滚动条，即可滚动显示和选择更多（当前宽度能排列显示多少就显示多少，无法排列完全显示时才显示滚动条）。可通过X关闭按钮、快捷键、取消选择用户列表中的用户来关闭多视频中的用户视频（接受Web关闭参数，其中包含用户UID，便于定位用户）。排序按时间顺序即可。
2、右下侧为《本地视频》小窗口，开启本地视频后显示。
3、界面中的大视频《主视频》显示当前所选的用户视频。

注：逻辑上，同屏中选择任何小视频将切换为《主视频》，原视频恢复到原小视频的位置上。
Item  21:13:21
目前工作量和需求不大，只有视频，UI几乎没有，在线用户列表和文字聊天也是由Web端实现。同时目前已完成多项功能，之前已经进行了多视频和H.264视频测试，包括P2P
Item  21:16:03
之前遇到了视频很卡顿的问题，最后排查找到是因为buffertime参数的问题，设置为5秒缓冲（同类网站几乎也都是设置的5秒），问题好了很多，但还不够完善，测试时我们再来优化这部分

